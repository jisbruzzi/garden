{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Cuaderno con ideas de José Ignacio Sbruzzi",
  "language": "en",
  "home_page_url": "https://jisbruzzi.github.io/garden",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "Blog de José Ignacio Sbruzzi.",
  "author": {
    "name": "José Ignacio Sbruzzi",
    "url": "https://jisbruzzi.github.io/"
  },
  "items": [{
      "id": "https://jisbruzzi.github.io/garden/pendientes.html",
      "url": "https://jisbruzzi.github.io/garden/pendientes.html",
      "title": "Tareas pendientes de este digital garden",
      "content_html": "<h1 id=\"tareas\" tabindex=\"-1\">Tareas <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/pendientes.html#tareas\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li>En todos lados donde dice &quot;posts&quot;, que diga &quot;notes&quot;</li>\n<li>Soporte para contenido en inglés</li>\n<li>UI multilingüe</li>\n<li>Migración a obsidian</li>\n<li>Integrar curriculums vitaes (en inglés y en español)</li>\n<li>Links de obsidian y compatibilidad con obsidian</li>\n<li>Integración con landing personal</li>\n<li>Temas de colores para cada tag</li>\n<li>backlinks</li>\n<li>notas que pueden describir un tag. Al hacer click en un tag, si tiene una note relacionada te la muestra entonces las notes son tags</li>\n</ul>\n<h1 id=\"ideas-de-postsnotas\" tabindex=\"-1\">Ideas de posts/notas <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/pendientes.html#ideas-de-postsnotas\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li>traer mis &quot;resúmenes de libros&quot; (jaja) / páginas &quot;sobre fuentes&quot;: páginas dedicadas a algunas fuentes de información\n<ul>\n<li>Código civil</li>\n<li>Summa teologiae / Teología</li>\n<li>Idris</li>\n<li>Libros de lenguajes de programación</li>\n<li>Entrada para cada Materia de la facultad</li>\n<li>Entrada para cada lenguaje de programación</li>\n</ul>\n</li>\n<li>Post titulado: &quot;lo importante en la vida&quot;</li>\n<li>Post sobre generadores de sitios estáticos que compara gatsby, nextjs, hugo 11ty</li>\n<li>Postmorten sobre la aplicación de técnicas de gestión de avanzada para la organización de un casamiento en 3 meses</li>\n<li>Traer posts que están en <a href=\"http://pepenachohacejuegos.wordpress.com/\">pepenachohacejuegos.wordpress.com</a></li>\n<li>Traer la galería de videojuegos de <a href=\"http://pepenachohacejuegos.wordpress.com/\">pepenachohacejuegos.wordpress.com</a></li>\n<li>Traer material de catequesis</li>\n</ul>\n",
      "date_published": "2022-03-24T12:16:11Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/lo_importante.html",
      "url": "https://jisbruzzi.github.io/garden/lo_importante.html",
      "title": "Lo importante: Hacer lo que vine a hacer",
      "content_html": "<p>Esta nota se basa en: <a href=\"https://youtu.be/52LKIWQ-ALY\">https://youtu.be/52LKIWQ-ALY</a></p>\n<p>Cosas que no dan felicidad en la vida:</p>\n<ul>\n<li>El dinero: ninguna cantidad de dinero basta, siempre se puede tener más. Qué cambia tenér una lamborghini más si ya tenés 1000?</li>\n<li>Los amigos y el amor de la gente: ninguna cantidad basta, siempre se puede tener más.</li>\n<li>El honor: Siempre puede haber una persona más que puede aplaudirte</li>\n</ul>\n<p>Así, nada de lo que puedas tener &quot;más de&quot; te va a hacer feliz de forma absoluta.</p>\n<p>Las cuatro causas según Aristóteles y Santo Tomás:</p>\n<ol>\n<li>causa material de X: de qué está hecho X</li>\n<li>causa formal de X: qué es X</li>\n<li>causa eficiente de X: cómo se originó X</li>\n<li>causa final de X: para qué existe X (finalidad)</li>\n</ol>\n<p>Cada uno de nosotros tiene cada una de las 4. Como seres creados que somos, de la misma forma que los objetos y herramientas que nosotros hacemos tienen las 4 causas, lo mismo vale para nosotros. Cambiando la X por &quot;mesa&quot;, &quot;reloj&quot;, o &quot;calculadora&quot;, esas son preguntas más faciles de responder y entender ( X = &quot;computadora&quot; lo dejamos para otro día). Cambiando X por tu nombre propio, se pone más complicado, pero no debe serlo.</p>\n<p>En <a href=\"https://www.vatican.va/archive/ESL0506/__PUZ.HTM\">Mateo 25</a>, vemos a Jesús hablando del &quot;para qué&quot;:</p>\n<ul>\n<li>Para qué sa casan las esposas (parábola de las jóvenes)</li>\n<li>Para qué el hombre rico le deja los talentos a los servidores (parábola de los talentos)</li>\n<li>Finalmente la respuesta general, para qué venimos al mundo (la caridad, amar a los demás)</li>\n</ul>\n<p>La conclusión de los &quot;tres bloques&quot; de Mateo 25 es que actuar en contrario a su finalidad es lo que condena un alma. Ninguna persona puede hacerlo a sabiendas y tener algo de felicidad. Por lo tanto, la única forma de ser feliz es <strong>hacer aquello para lo que fui creado</strong>.</p>\n<p>Suelo enunciar este principio como <strong>&quot;Hacer lo que vine al mundo a hacer&quot;</strong>. Enunciarlo de esta forma suena menos religioso y es más facil de decirlo sin dar excesivas explicaciones ni hacer papelones, que en mi opinión es la forma correcta de dar testimonio. Este es mi principio general para todas las decisiones que tomo, entonces suelo enunciarlo bastante seguido. KISS, YAGNI, etc, son criterios que uno podría deducir de la idea de &quot;finalidad&quot;.</p>\n<p>Mi intención es pasar mi vida entera haciendo aquello para lo que fui creado, y haciendolo.</p>\n",
      "date_published": "2022-03-24T12:16:11Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/ostep.html",
      "url": "https://jisbruzzi.github.io/garden/ostep.html",
      "title": "Resumen de ostep.org",
      "content_html": "<h1 id=\"5.-intrlude-process-api\" tabindex=\"-1\">5. Intrlude Process API <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/ostep.html#5.-intrlude-process-api\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li><code>fork()</code>: returns 0 in the child and a pid in the parent</li>\n<li><code>exec()</code> y amigos: reemplaza el proceso actual por otro. Nunca retorna.</li>\n<li><code>wait()</code>: espera a un child process</li>\n<li>Esta API permite lanzar procesos con sus fp (eg stdi/o/e) modificados o algunas diferencias por el estilo.</li>\n<li>signals caught with <code>signal()</code> pueden ser enviadas a distintos procesos</li>\n</ul>\n<h1 id=\"6.-mechanism:-limited-direct-execution\" tabindex=\"-1\">6. Mechanism: Limited Direct Execution <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/ostep.html#6.-mechanism:-limited-direct-execution\" aria-hidden=\"true\">#</a></h1>\n<h2 id=\"problem-1:-restricted-oerations\" tabindex=\"-1\">Problem 1: Restricted oerations <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/ostep.html#problem-1:-restricted-oerations\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li>limitación: user mode vs kernel mode (hardware supported)</li>\n<li>traps: hardware supported\n<ul>\n<li>trap table: configured on boot. event -&gt; kernel code address</li>\n<li>trap instruction:\n<ol>\n<li>push registers into per process kernel stack</li>\n<li>switch to kernel mode</li>\n<li>pass control to os</li>\n</ol>\n</li>\n<li>return-from-trap instruction</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"problem-2:-switching-between-processes\" tabindex=\"-1\">Problem 2: Switching between processes <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/ostep.html#problem-2:-switching-between-processes\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li>Cooperative approach: wait for traps (inseguro: loops infinitos!)</li>\n<li>Non-cooperative approach: timers set by the kernel on boot. Causan timer interrupts</li>\n<li>trap desde syscall es distinta a timer interrupt</li>\n<li>context switch: trap from A, return-from-trap  into B.</li>\n</ul>\n<h1 id=\"7.-scheduling:-introduction\" tabindex=\"-1\">7. Scheduling: Introduction <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/ostep.html#7.-scheduling:-introduction\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li>Round robin/time slicing: cambiar de proceso lo más frecuentemente posible</li>\n<li>SCTF (Shortest Time-to-Completion First) /SJF (Shortest Job First): Correr el más corto primero</li>\n<li>RR maximiza responsiveness, y maximiza average turnaround time. SCTF/SJF al contrario</li>\n</ul>\n<h1 id=\"8.-scheduling:-the-multi-level-feedback-queue\" tabindex=\"-1\">8. Scheduling:  The Multi-Level Feedback Queue <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/ostep.html#8.-scheduling:-the-multi-level-feedback-queue\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li>Rules of MLFQ:\n<ul>\n<li><strong>Rule 1:</strong> If Priority(A) &gt; Priority(B), A runs (B doesn’t).</li>\n<li><strong>Rule 2:</strong> If Priority(A) = Priority(B), A &amp; B run in RR using the time slice (quantum length) of the given queue.</li>\n<li><strong>Rule 3:</strong> When a job enters the system, it is placed at the highest priority (the topmost queue).</li>\n<li><strong>Rule 4:</strong> Once a job uses up its time allotment at a given level (regardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</li>\n<li><strong>Rule 5:</strong> After some time period S, move all the jobs in the system to the topmost queue.</li>\n</ul>\n</li>\n<li>Starved job: permanece con poca prioridad</li>\n</ul>\n<h1 id=\"9.-scheduling:-proportional-share\" tabindex=\"-1\">9. Scheduling: Proportional Share <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/ostep.html#9.-scheduling:-proportional-share\" aria-hidden=\"true\">#</a></h1>\n",
      "date_published": "2022-03-20T22:15:35Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/cheatsheet-vue3.html",
      "url": "https://jisbruzzi.github.io/garden/cheatsheet-vue3.html",
      "title": "Cheatsheet vue 3",
      "content_html": "<h1 id=\"options\" tabindex=\"-1\">Options <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#options\" aria-hidden=\"true\">#</a></h1>\n<p>Exportadas por <code>&lt;script/&gt;</code> block.</p>\n<ul>\n<li><code>data:Function</code>: init data</li>\n<li><code>props:array&lt;string&gt;|Object</code>:\n<ul>\n<li><code>array&lt;string&gt;</code>: nombres</li>\n<li><code>Object</code>: type ó type-default-required-validator</li>\n</ul>\n</li>\n<li><code>computed:{ [key: string]: Function | { get: Function, set: Function } }</code>: campos computados</li>\n<li><code>methods:{ [key: string]: Function }</code>: methods</li>\n<li><code>watch:{ [key: string]: string | Function | Object | Array}</code>: observar <code>data</code> ó <code>computed</code>. pasa <code>val</code>   y <code>oldVal</code>, o puede ser un nombre de un método, o el key puede ser un path adentro de un objeto</li>\n<li><code>emits:Array&lt;string&gt; | Object</code>: documenta uso de <code>this.$emit('name'ev)</code>. Como objeto se puede pasar una función de validación.</li>\n<li><code>template:string</code> ó <code>render:Function</code>. En el caso de render usa la función <code>h</code> ó jsx</li>\n<li>lifecycle hooks: ver lifecycle</li>\n<li><code>directives:Object</code>: key: directive y value: Object de hooks</li>\n<li><code>components:Object</code>: componentes que se pueden utilizar en el template de este</li>\n<li><code>mixins:Array&lt;Object&gt;</code>: mixins que se combinan en este componente</li>\n<li><code>extends:Object|Function</code>: un mixin.</li>\n<li><code>provide:Object | () =&gt; Object</code>: objetos que pueden ser inyectados por los hijos</li>\n<li><code>inject:Array&lt;string&gt; | { [key: string]: string | Symbol | Object }</code>: ataja los valores provistos y los inyecta en <code>this</code>. Como objeto permite un <code>default</code>.</li>\n<li><code>setup:(props,context)=&gt;void</code>: entry point to Composition API. Called before the component is created. Devuelve <code>Data</code> para el template ó render function.</li>\n<li><code>name</code>: permite autorreferencia y docs</li>\n<li><code>delimiters</code>: default <code>[', ']</code></li>\n<li><code>inheritAttrs:boolean</code> default <code>true</code>. Fallthrough de los attrs adicionales desde la invocación del componente al top-level component del template</li>\n</ul>\n<h1 id=\"lifecycle\" tabindex=\"-1\">lifecycle <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#lifecycle\" aria-hidden=\"true\">#</a></h1>\n<p><img src=\"https://v3.vuejs.org/images/lifecycle.svg?__WB_REVISION__=f4a90248bd51e5ee6261fd079b5dffb5\" alt=\"img\" /></p>\n<h1 id=\"instance-api-interesante\" tabindex=\"-1\">Instance API interesante <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#instance-api-interesante\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li><code>$el</code>: The root DOM element that the component instance is managing.</li>\n<li><code>$refs</code>: An object of DOM elements and component instances, registered with <code>ref</code> attributes.</li>\n<li><code>$watch:(source:{string | Function},callback:{Function | Object}, options:{deep:boolean,...})</code></li>\n<li><code>$emit(eventName:string,...args)</code></li>\n</ul>\n<h1 id=\"directives\" tabindex=\"-1\">Directives <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#directives\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li><code>v-text</code></li>\n<li><code>v-html</code></li>\n<li><code>v-show</code>: toggles <code>display</code> CSS property</li>\n<li><code>v-if</code></li>\n<li><code>v-else</code></li>\n<li><code>v-else-if</code></li>\n<li><code>v-for</code></li>\n<li><code>v-on:&lt;evento&gt;</code>: shorthand <code>@click</code></li>\n<li><code>v-bind:&lt;key&gt;</code>: shorthand: <code>:href</code>. Con <code>clases</code> y <code>style</code> permite objetos y arrays.</li>\n<li><code>v-model</code>!!!!!</li>\n<li><code>v-slot:&lt;nombre&gt;</code>: para pasar contenido como hijo en distintos slots. Permite pasar props.</li>\n<li><code>v-pre</code>: skip compilation</li>\n<li><code>v-cloak</code>: aplicada automaticamente</li>\n<li><code>v-once</code>: rendered once</li>\n<li><code>v-is</code>: permite cambiar el componente on the fly</li>\n</ul>\n<h1 id=\"attributes\" tabindex=\"-1\">Attributes <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#attributes\" aria-hidden=\"true\">#</a></h1>\n<p>se usan con <code>v-bind:</code> casi siempre (osea <code>:</code>)</p>\n<ul>\n<li><code>key</code>: identity for diffing</li>\n<li><code>ref</code>: registers to <code>$refs</code></li>\n<li><code>is</code>: for dynamic components</li>\n</ul>\n<h1 id=\"built-in-components\" tabindex=\"-1\">Built-in components <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#built-in-components\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li><code>component</code>: meta-component usado con attr <code>is</code></li>\n<li><code>transition</code></li>\n<li><code>transition-group</code></li>\n<li><code>keep-alive</code>: cachea hijos para que no se reinicialicen siempre</li>\n<li><code>slot</code>: tiene attr <code>name</code> renderiza slots que se pasaron.</li>\n<li><code>teleport</code>: attr <code>to</code>. Manda los elementos a ese elemento.</li>\n</ul>\n<h1 id=\"reactivity-api-interesante\" tabindex=\"-1\">Reactivity API interesante <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#reactivity-api-interesante\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li><code>reactive:(Object)=&gt;Proxy</code>: devuelve copia reactiva. deep. Hay variantes Shallow.</li>\n<li><code>readonly:(Object)=&gt;Readonly proxy</code>: devuelve copia reactiva readonly. deep. Hay variantes Shallow.</li>\n<li><code>ref:(v)=&gt; {value:Proxy&lt;v&gt;}</code></li>\n<li><code>computed:(fn)=&gt;ref</code> devuelve una reactive ref que cambia automaticamente</li>\n<li><code>watchEffect:fn=&gt;void</code>: re-runs <code>fn</code> cuando las dependencias reactivas cambian</li>\n<li><code>watch(fn=&gt;Object|Ref,(val,oldVal)=&gt;void)</code>: watches fn or Ref and triggers the other fn</li>\n</ul>\n<h1 id=\"composition-api-interesante\" tabindex=\"-1\">Composition API interesante <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-vue3.html#composition-api-interesante\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li>Hooks: se importan desde vue</li>\n<li>provide/inject: se importan desde vue</li>\n</ul>\n",
      "date_published": "2021-05-17T19:32:20Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/cheatsheet-redux.html",
      "url": "https://jisbruzzi.github.io/garden/cheatsheet-redux.html",
      "title": "Cheatsheet Redux",
      "content_html": "<h1 id=\"react-redux\" tabindex=\"-1\">React - redux <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-redux.html#react-redux\" aria-hidden=\"true\">#</a></h1>\n<h2 id=\"concepts\" tabindex=\"-1\">Concepts <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-redux.html#concepts\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li>state: the state of the entire application</li>\n<li>action: POJO with a &quot;type&quot; key and needed information.</li>\n<li>reducer: <code>function (state=initialState,action):State</code>. Pure function.</li>\n<li>store:\n<ul>\n<li>Stores current state</li>\n<li>API: <code>getState()</code>, <code>dispatch(action)</code>, <code>subscribe(listener)</code> + unsubscribe</li>\n<li>composition: application state can be large so multiple reducers can have different responsibilities affecting a different part of the state</li>\n</ul>\n</li>\n<li>enhancer: decorator around store</li>\n<li>middleware: <code>store =&gt; next =&gt; action =&gt; {}</code> decorates only <code>dispatch()</code> and there can be many. Set up by the <code>applyMiddleware</code> enhancer.</li>\n</ul>\n<h2 id=\"react-redux-api\" tabindex=\"-1\">react-redux API <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-redux.html#react-redux-api\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li><code>useDispatch()</code>: returns <code>dispatch(action)</code></li>\n<li><code>useSelector(store=&gt;store.x.y)</code>: returns that value from the store and triggers updates.</li>\n<li><code>&lt;Provider store={store}&gt;</code>: provides a store for hooks</li>\n</ul>\n<h2 id=\"redux-async\" tabindex=\"-1\">redux async <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-redux.html#redux-async\" aria-hidden=\"true\">#</a></h2>\n<p>Using <code>redux-thunk</code> middleware one can use async functions as if they were actions. The async functions receive <code>dispatch</code> and <code>getState</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchTodos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> getState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />\t<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/fakeApi/todos'</span><span class=\"token punctuation\">)</span><br />\t<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'todos/todosLoaded'</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>todos <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br /><span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2021-05-17T19:32:20Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html",
      "url": "https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html",
      "title": "Cheatsheet PHPCake",
      "content_html": "<h1 id=\"dependency-injection\" tabindex=\"-1\">Dependency injection <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#dependency-injection\" aria-hidden=\"true\">#</a></h1>\n<p>Se incluyen los servicios inyectables como argumentos de los métodos de los controllers. Pueden ser abstractos o concretos. A partir del tipo CakePHP deduce cuál es el inyectable.</p>\n<p>You can use the service container to define ‘application services’. These classes can use models and interact with other objects like loggers and mailers to build re-usable workflows and business logic for your application.</p>\n<p>Los servicios se agregan en el método <code>services</code> de la <code>Application</code>.</p>\n<p>Service providers: agrupan servicios que pueden inyectar y permiten inyectarlos lazily.</p>\n<h1 id=\"routing\" tabindex=\"-1\">routing <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#routing\" aria-hidden=\"true\">#</a></h1>\n<p><code>routes.php</code><br />\ncomo en django, si no es el fallback hay que pasar por kwargs controller, action, params.</p>\n<h1 id=\"controllers\" tabindex=\"-1\">Controllers <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#controllers\" aria-hidden=\"true\">#</a></h1>\n<p>definen actions, settean variables de las views (<code>$this-&gt;set</code>) a partir del <code>$this-&gt;request</code>. Renderiza el contenido de los templates (php de toda la vida).</p>\n<h1 id=\"components\" tabindex=\"-1\">Components <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#components\" aria-hidden=\"true\">#</a></h1>\n<p>inyectados en el constructor de los controllers usando <code>$this-&gt;loadComponent($name)</code>. Agregan métodos al controller.</p>\n<h1 id=\"views\" tabindex=\"-1\">Views <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#views\" aria-hidden=\"true\">#</a></h1>\n<p>algo más groso</p>\n<h2 id=\"templates\" tabindex=\"-1\">Templates <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#templates\" aria-hidden=\"true\">#</a></h2>\n<p>Archivos php que reciben las variables setteadas. Tienen herencia y viewblocks para evitar repetir código (parece jinja).</p>\n<h2 id=\"elements\" tabindex=\"-1\">Elements <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#elements\" aria-hidden=\"true\">#</a></h2>\n<p>componentes react ssr</p>\n<h2 id=\"layouts\" tabindex=\"-1\">Layouts <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#layouts\" aria-hidden=\"true\">#</a></h2>\n<p>templates que envuelven todo</p>\n<h2 id=\"helpers\" tabindex=\"-1\">Helpers <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#helpers\" aria-hidden=\"true\">#</a></h2>\n<p>Components como en los controllers pero en la view.</p>\n<h2 id=\"cells\" tabindex=\"-1\">Cells <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#cells\" aria-hidden=\"true\">#</a></h2>\n<p>Mini-controllers y views.</p>\n<h2 id=\"themes\" tabindex=\"-1\">Themes <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#themes\" aria-hidden=\"true\">#</a></h2>\n<p>plugins que incluyen tamplates</p>\n<h2 id=\"json-and-xml-views\" tabindex=\"-1\">JSON and XML views <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#json-and-xml-views\" aria-hidden=\"true\">#</a></h2>\n<p><code>$this-&gt;loadComponent('RequestHandler');</code></p>\n<pre><code>// Set the view vars that have to be serialized.\n$this-&gt;set(compact('articles', 'comments'));\n\n// Specify which view vars JsonView should serialize.\n$this-&gt;viewBuilder()-&gt;setOption('serialize', ['articles', 'comments']);\n</code></pre>\n<h1 id=\"orm\" tabindex=\"-1\">ORM <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#orm\" aria-hidden=\"true\">#</a></h1>\n<h2 id=\"tables\" tabindex=\"-1\">Tables <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#tables\" aria-hidden=\"true\">#</a></h2>\n<p>pueden no tener nada y cargarse de la db<br />\nThese objects provide access to collections of data. They allow you to save new records, modify/delete existing ones, define relations, and perform bulk operations.</p>\n<h2 id=\"entities\" tabindex=\"-1\">Entities <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#entities\" aria-hidden=\"true\">#</a></h2>\n<p>Entities represent individual records and allow you to define row/record level behavior &amp; functionality. CakePHP uses naming conventions to link the Table and Entity class together.</p>\n<h2 id=\"querys\" tabindex=\"-1\">querys <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#querys\" aria-hidden=\"true\">#</a></h2>\n<p><code>$query = $articles-&gt;find();</code></p>\n<pre><code>// Inside ArticlesController.php\n\n$query = $this-&gt;Articles-&gt;find()\n    -&gt;where(['id &gt;' =&gt; 1])\n    -&gt;all();;\n</code></pre>\n<h2 id=\"behaviors\" tabindex=\"-1\">Behaviors <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#behaviors\" aria-hidden=\"true\">#</a></h2>\n<p>lifecycle hooks agrupados para las <code>Table</code></p>\n<h2 id=\"validating-data\" tabindex=\"-1\">Validating data <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#validating-data\" aria-hidden=\"true\">#</a></h2>\n<p>métodos que construyen validadores en las <code>Table</code>. Pueden llamar a métodos de la entidad.</p>\n<h2 id=\"saving-data\" tabindex=\"-1\">Saving data <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#saving-data\" aria-hidden=\"true\">#</a></h2>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$article</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$articlesTable</span><span class=\"token operator\">-></span><span class=\"token function\">newEmptyEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token variable\">$articlesTable</span><span class=\"token operator\">-></span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$article</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>By default the save() method will also save one level of associations</p>\n<h2 id=\"deleting-data\" tabindex=\"-1\">Deleting data <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#deleting-data\" aria-hidden=\"true\">#</a></h2>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// In a controller.</span><br /><span class=\"token variable\">$entity</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Articles</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Articles</span><span class=\"token operator\">-></span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$entity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"asociations-linking-tables-together\" tabindex=\"-1\">Asociations - linking Tables together <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#asociations-linking-tables-together\" aria-hidden=\"true\">#</a></h2>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Comments'</span><span class=\"token punctuation\">)</span></code></pre>\n<h1 id=\"events-system\" tabindex=\"-1\">Events system <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#events-system\" aria-hidden=\"true\">#</a></h1>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$event</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Model.Order.afterPlace'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><br />    <span class=\"token string single-quoted-string\">'order'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$order</span><br /><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">getEventManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">Orders</span><span class=\"token operator\">-></span><span class=\"token function\">getEventManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Model.Order.afterPlace'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token class-name static-context\">Log</span><span class=\"token operator\">::</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><br />        <span class=\"token string single-quoted-string\">'info'</span><span class=\"token punctuation\">,</span><br />        <span class=\"token string single-quoted-string\">'A new order was placed with id: '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$event</span><span class=\"token operator\">-></span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token property\">id</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"rest\" tabindex=\"-1\">REST <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#rest\" aria-hidden=\"true\">#</a></h1>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$routes</span><span class=\"token operator\">-></span><span class=\"token function\">scope</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/api'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">RouteBuilder</span> <span class=\"token variable\">$routes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token variable\">$routes</span><span class=\"token operator\">-></span><span class=\"token function\">resources</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Articles'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">RouteBuilder</span> <span class=\"token variable\">$routes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        <span class=\"token variable\">$routes</span><span class=\"token operator\">-></span><span class=\"token function\">resources</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Comments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Para que traduzca bien los verbos HTTP.</p>\n<h1 id=\"plugins\" tabindex=\"-1\">Plugins <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#plugins\" aria-hidden=\"true\">#</a></h1>\n<p>Son paquetes externos que incluyen todo y hacés en bootstrap <code> $this-&gt;addPlugin('AcmeCorp/ContactManager');</code><br />\nSon las apps de django.</p>\n<h1 id=\"auth\" tabindex=\"-1\">Auth <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/cheatsheet-phpcake.html#auth\" aria-hidden=\"true\">#</a></h1>\n<p>plugin de authentication, hay que hacer acciones de login</p>\n",
      "date_published": "2021-05-17T19:32:20Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/raspotify-rpi.html",
      "url": "https://jisbruzzi.github.io/garden/raspotify-rpi.html",
      "title": "Cómo usar una raspberry pi como receptor de spotify",
      "content_html": "<p>La raspberry pi es una genialidad tecnológica del siglo XXI que no uso para nada tecnológico sino para reproducir canciones de spotify por unos parlantes externos. Y ni siquiera para eso sirve.</p>\n<h1 id=\"paso-1:-reinstalar-raspberry-pi-os-o-como-se-llame\" tabindex=\"-1\">Paso 1: reinstalar raspberry pi OS o como se llame <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/raspotify-rpi.html#paso-1:-reinstalar-raspberry-pi-os-o-como-se-llame\" aria-hidden=\"true\">#</a></h1>\n<p><a href=\"https://www.raspberrypi.org/documentation/installation/installing-images/\">Referencia</a></p>\n<p>Simplemente hay que:</p>\n<ul>\n<li>ir a la <a href=\"https://www.raspberrypi.org/\">página oficial de raspberry pi</a> y descargar el sistema operativo ahí.</li>\n<li>conectar la tarjeta sd y ver qué nombre le asignó linux usando <code>df -h</code> (columna <code>Filesystem</code>). Supongamos que linux le asignó el archivo <code>/dev/sdXX</code> a la tarjeta SD.</li>\n<li><code>dd if=&lt;imagen del SO descomprimida&gt; of=/dev/sdXX bs=4M conv=fsync</code></li>\n</ul>\n<h1 id=\"paso-2:-raspotify\" tabindex=\"-1\">Paso 2: raspotify <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/raspotify-rpi.html#paso-2:-raspotify\" aria-hidden=\"true\">#</a></h1>\n<p>Seguir las <a href=\"https://github.com/dtcooper/raspotify\">instrucciones de instalación</a>.</p>\n<h1 id=\"paso-3:-resolver-problema-con-el-volumen\" tabindex=\"-1\">Paso 3: resolver problema con el volumen <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/raspotify-rpi.html#paso-3:-resolver-problema-con-el-volumen\" aria-hidden=\"true\">#</a></h1>\n<ol>\n<li>correr el comando <code>alsamixer</code></li>\n<li>Cambiar de dispositivo con <code>F6</code>, elegir headphones</li>\n<li>Subir el volumen a 100%</li>\n<li>Salir con la tecla ESC</li>\n<li>Correr el comando <code>sudo alsactl store</code> <a href=\"https://askubuntu.com/questions/50067/howto-save-alsamixer-settings\">Referencia</a></li>\n</ol>\n<h1 id=\"paso-4:-resolver-otros-problemas\" tabindex=\"-1\">Paso 4: resolver otros problemas <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/raspotify-rpi.html#paso-4:-resolver-otros-problemas\" aria-hidden=\"true\">#</a></h1>\n<p>Raspotify no va a funcionar! Tuve más problemas pero no recuerdo cómo los arreglé</p>\n<p>Issues recomendables:</p>\n<ul>\n<li><a href=\"https://github.com/dtcooper/raspotify/issues/180\">180</a></li>\n<li><a href=\"https://github.com/dtcooper/raspotify/issues/301\">301</a></li>\n</ul>\n<p>Para diagnosticar problemas: <code>journalctl -u raspotify</code></p>\n",
      "date_published": "2021-03-24T14:07:12Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/docker-disco-externo.html",
      "url": "https://jisbruzzi.github.io/garden/docker-disco-externo.html",
      "title": "Cómo uso docker con mi disco externo",
      "content_html": "<p>Como docker me llenaba el disco de mi computadora, decidí pasarlo a un disco sólido externo.</p>\n<ul>\n<li>Disco sólido externo de 128Gb formateado ext4</li>\n<li>Configuración de docker daemon:</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'{<br />    \"data-root\":\"/media/&lt;username>/&lt;disco>/docker-root\"<br />}'</span> <span class=\"token operator\">></span> /etc/docker/daemon.json</code></pre>\n<ul>\n<li>Hacer que docker no inicie al prender la computadora. Este paso es importante porque docker puede crear la carpeta <code>/media/&lt;username&gt;/&lt;disco&gt;/docker-root</code> antes de que se monte el disco.</li>\n</ul>\n<pre><code>systemctl disable docker.socket\nsystemctl disable docker.service\n</code></pre>\n<ul>\n<li>instalar udiskie</li>\n<li>hacer que udiskie se ejecute al iniciar X:</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'( sleep 1 &amp;&amp; udiskie --smart-tray --menu nested ) &amp;'</span> <span class=\"token operator\">>></span> .xprofile</code></pre>\n<p>Ahora, al empezar a trabajar hay que correr <code>sudo service docker start</code> antes de ejecutar cualquier comando de docker o docker compose.</p>\n",
      "date_published": "2021-02-25T02:37:30Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/aprender-a-programar.html",
      "url": "https://jisbruzzi.github.io/garden/aprender-a-programar.html",
      "title": "Aprender a programar",
      "content_html": "<p>Muy seguido me preguntan cómo aprender a programar. Aquí respondo.</p>\n<p>Hay 2 motivos para aprender a programar:</p>\n<ul>\n<li>para hacer dinero</li>\n<li>para ver si me gusta una carrera universitaria relacionada</li>\n</ul>\n<p>Si tu intención es hacer dinero, lo ideal es aprender a hacer páginas web (también llamado &quot;desarrollo web&quot; o &quot;desarrollo front end&quot;). Esto es muy distinto de programar. El aprendizaje de desarrollo web se puede dividir en tres partes básicas:</p>\n<ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>Javascript</li>\n</ul>\n<p>De estos 3 componentes, sólo javascript es un lenguaje de programación. Sabiendo muy poco javascript se puede hacer desarrollo web. De hecho, sabiendo relativamente poco de las 3 cosas uno ya puede trabajar para el exterior o en una empresa local.</p>\n<p>Si tu intención es aprender a programar para ver si te gusta una carrera, lo ideal es aprender python, que se usa en cursos introductorios en muchas universidades. Otra ventaja de python es que se puede usar para muchísimos proyectos &quot;hobbie&quot;: videojuegos, edición de imágenes, análisis de datos, inteligencia artificial, IOT, automatizaciones de lo más diverso, etc. Una vez explorado python podés pasar a aprender un lenguaje con tipos (recomiendo C#), o un lenguaje funcional de la família de lisp (recomiendo scheme).</p>\n<p>Otra cosa que puede ser muy interesante para empezar es probar programar juegos. Recomiendo <a href=\"https://godotengine.org/\">godot</a> o <a href=\"https://love2d.org/\">Löve</a>.</p>\n<h1 id=\"links-para-aprender-desarrollo-web\" tabindex=\"-1\">Links para aprender desarrollo web <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/aprender-a-programar.html#links-para-aprender-desarrollo-web\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/\">https://www.freecodecamp.org/</a></li>\n<li><a href=\"https://developer.mozilla.org/es/docs/Learn\">https://developer.mozilla.org/es/docs/Learn</a> (español) (muy recomendable)</li>\n<li><a href=\"https://github.com/microsoft/Web-Dev-For-Beginners\">https://github.com/microsoft/Web-Dev-For-Beginners</a> (traducido al español en las carpetas &quot;translations&quot; dentro de cada capítulo)</li>\n<li><a href=\"https://docs.microsoft.com/es-es/users/jenlooper-2911/collections/jg2gax8pzd6o81?WT.mc_id=academic-4621-cxa\">Cursos en español de Microsoft learn</a></li>\n</ul>\n<h1 id=\"links-para-aprender-a-programar-(en-espanol)\" tabindex=\"-1\">Links para aprender a programar (en español) <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/aprender-a-programar.html#links-para-aprender-a-programar-(en-espanol)\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li>Material del curso Essaya ex Wachenchauzer (curso inicial FIUBA): <a href=\"https://algoritmos1rw.ddns.net/material\">https://algoritmos1rw.ddns.net/material</a></li>\n<li>Curso paradigmas de programación UTN: <a href=\"http://www.pdep.com.ar/\">http://www.pdep.com.ar/</a></li>\n<li>Aula virtual algoritmos y programación 3 FIUBA (recomiendo pdf &quot;Libro POO Carlos Fontela (beta 0.7 - agosto 2018)&quot; ): <a href=\"https://campus.fi.uba.ar/course/view.php?id=210\">https://campus.fi.uba.ar/course/view.php?id=210</a></li>\n<li>Canal de youtube de algoritmos y programación 3 FIUBA: <a href=\"https://www.youtube.com/channel/UCaaFHnybZanyBBxuE0IXa_Q\">https://www.youtube.com/channel/UCaaFHnybZanyBBxuE0IXa_Q</a></li>\n</ul>\n<h1 id=\"material-super-avanzado-para-que-revises-en-5-anos\" tabindex=\"-1\">Material súper avanzado para que revises en 5 años <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/aprender-a-programar.html#material-super-avanzado-para-que-revises-en-5-anos\" aria-hidden=\"true\">#</a></h1>\n<ul>\n<li><a href=\"http://learnyouahaskell.com/\">http://learnyouahaskell.com/</a></li>\n<li><a href=\"https://softwarefoundations.cis.upenn.edu/\">https://softwarefoundations.cis.upenn.edu/</a></li>\n</ul>\n",
      "date_published": "2021-02-24T01:32:20Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/por-que-renuncie.html",
      "url": "https://jisbruzzi.github.io/garden/por-que-renuncie.html",
      "title": "Por qué renuncié",
      "content_html": "<h1 id=\"porque-no-quiero-delegarle-a-otro-mi-autoestima\" tabindex=\"-1\">porque no quiero delegarle a otro mi autoestima <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/por-que-renuncie.html#porque-no-quiero-delegarle-a-otro-mi-autoestima\" aria-hidden=\"true\">#</a></h1>\n<p>Cuando uno trabaja en una empresa, aparecen personas que le dicen a otras personas lo que tienen que hacer; o que cobran más o menos que otras; o que dicen cuán bien o cuán mal trabajan las otras. Todo esto es enfermo porque le sirve a la empresa en la medida que redunda en la imagen que el empleado tiene de sí mismo. Es tóxico y no entiendo por qué una persona psicológicamente saludable se sometería a esta dinámica si tiene alternativas.</p>\n<h1 id=\"porque-los-numeros-no-me-dan-bien\" tabindex=\"-1\">Porque los números no me dan bien <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/por-que-renuncie.html#porque-los-numeros-no-me-dan-bien\" aria-hidden=\"true\">#</a></h1>\n<p>En el mercado laboral de sistemas se valora demasiado la antigüedad. Como no tengo antigüedad, prefiero no formar parte del mercado laboral. Tener experiencia no es lo mismo que trabajar bien, sin embargo lo que se paga es la experiencia.</p>\n<h1 id=\"porque-no-creo-encontrar-un-trabajo-local-que-aproveche-mi-formacion\" tabindex=\"-1\">Porque no creo encontrar un trabajo local que aproveche mi formación <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/por-que-renuncie.html#porque-no-creo-encontrar-un-trabajo-local-que-aproveche-mi-formacion\" aria-hidden=\"true\">#</a></h1>\n<p>Desarrollar software es facilísimo. Cualquiera que se anime a escribir cosas en un lenguaje formal lo puede hacer. No hace falta saber algoritmia, ni conocer scrum, ni conocer patrones de diseño, ni conocer buenas prácticas de desarrollo, ni saber git, ni saber casi nada.</p>\n<p>Yo soy Ingeniero en Informática, eso no implica que sé programar rápido; sé un poquito de un montón de cosas pero no sé programar rápido.</p>\n<p>Como en el mercado laboral local no se necesita gente que sepa mucho y programe lento, es preferible no ser parte.</p>\n",
      "date_published": "2021-02-18T02:34:00Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/clientes-gcloud.html",
      "url": "https://jisbruzzi.github.io/garden/clientes-gcloud.html",
      "title": "Cómo usar gcloud con un cliente",
      "content_html": "<p>Actualmente mi estrategia de venta consiste en delegarle los costos de infraestructura al cliente si así lo desean. Para que los pagos puedan venir de la tarjeta de crédito del cliente, es necesario que éste se registre en google cloud. Mi proceso de desarrollo implica una primera etapa en la que construyo un prototipo y una parte de la infraestructura en google cloud, y luego transfiero todo lo que creé al cliente.</p>\n<p><a href=\"https://cloud.google.com/billing/docs/how-to/modify-project\">Fuente de toda esta información</a></p>\n<blockquote>\n<p><strong>Paso previo: cambiar el idioma</strong><br />\nPara cambiar el idioma, hay que ir al menú superior derecho (3 puntitos) &gt; preferences &gt; lanuage &amp; region</p>\n</blockquote>\n<p>Cada <em>persona</em> que se registra en google cloud tiene vinculada una <em>billing account</em>. Cada <em>proyecto</em> tiene <strong>1</strong> <em>billing account</em>, y una <em>billing account</em> puede tener <strong>muchos</strong> <em>proyectos</em>.</p>\n<h1 id=\"proceso-general-para-pasar-los-gastos-al-cliente\" tabindex=\"-1\">Proceso general para pasar los gastos al cliente <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/clientes-gcloud.html#proceso-general-para-pasar-los-gastos-al-cliente\" aria-hidden=\"true\">#</a></h1>\n<ol>\n<li>El desarrollador <strong>crea</strong> el <em>proyecto</em>, prototipa sobre éste proyecto, puede realizar una pequeña inversión.</li>\n<li>El cliente se registra en <a href=\"https://cloud.google.com/\">cloud.google.com</a></li>\n<li>El cliente va al menú <strong>&quot;sandwich&quot;</strong> (3 líneas) superior izquierdo &gt; <strong>Billing</strong> (tarjeta de crédito) &gt; <strong>Account management</strong> (engranaje)</li>\n<li>En la barra derecha se muestra toda la información de acceso de cualquier cosa de google cloud. El cliente debe hacer click en <strong>+ADD MEMBER</strong>.</li>\n<li>El cliente pone en <strong>&quot;New members&quot;</strong> el mail del desarrollador.</li>\n<li>El cliente Hace click en <strong>Role</strong> y luego donde dice &quot;Type to filter&quot;, escribe <strong>&quot;Billing Account User&quot;</strong>, y lo concede al desarrollador haciendo click en <strong>SAVE</strong></li>\n<li>El desarrollador va a <strong>sandwich</strong> &gt; <strong>Billing</strong> &gt; <strong>Account management</strong>, y clickea en <strong>&quot;Actions&quot;</strong> &gt; <strong>&quot;Change billing&quot;</strong> del proyecto a transferir. Allí va a poder elegir la billing account del cliente.</li>\n<li>(PENDIENTE VERIFICAR SI FUNCIONA) El cliente ahora puede desactivar el rol que me concedió sobre su Billing Account para evitar que el desarrollador (malintencionadamente o por error) agregue más proyectos a su billing account</li>\n</ol>\n<h1 id=\"proceso-para-pasar-el-proyecto-al-cliente\" tabindex=\"-1\">Proceso para pasar el proyecto al cliente <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/clientes-gcloud.html#proceso-para-pasar-el-proyecto-al-cliente\" aria-hidden=\"true\">#</a></h1>\n<p>El desarrollador que creó el proyecto por defecto tiene rol <strong>Owner</strong> en el mismo. Para darle visibilidad absoluta al cliente sobre la infraestructura, debe el desarrollador debe asignarle ese mismo rol al cliente.</p>\n<ol>\n<li>Loggearse en la <a href=\"https://jisbruzzi.github.io/garden/(https://console.cloud.google.com)\">consola de google cloud</a></li>\n<li>Hamburguesa-&gt;IAM</li>\n<li>Click en el botón &quot;ADD&quot;</li>\n<li>Aparece un formulario, en &quot;New members&quot; poner el mail del cliente, en Role poner &quot;Owner&quot;</li>\n</ol>\n",
      "date_published": "2021-02-17T01:28:38Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/nombres-sin-dns.html",
      "url": "https://jisbruzzi.github.io/garden/nombres-sin-dns.html",
      "title": "Nombres en vez de IP en tu LAN",
      "content_html": "<p>No hace falta instalar y configurar un servidor DNS para acceder servidores locales usando nombres.<br />\nSe puede usar <a href=\"https://www.avahi.org/\">Avahi</a>. Avahi es un protocolo  estandarizado recientemente, no todos los sistemas lo soportan. Así, hay que instalar daemon y servidores en los equipos que participan de la red. Es más facil configurar Avahi que configurar un DNS local.</p>\n<p>Los siguientes comandos instalan avahi daemon y server. Funcionan en raspberry pi, ubuntu 18 y 20.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> openssh-server<br /><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> avahi-daemon<br /><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /usr/share/doc/avahi-daemon/examples/ssh.service /etc/avahi/services/<br />view /etc/hostname</code></pre>\n<p>Ahora, en un equipo que tenga instalado <code>avahi-daemon</code>, puede acceder usando el hostname del servidor ssh. Así, si en <code>/etc/hostname</code> dice <code>fooserver</code>, accedemos como <code>ssh usuario@fooserver.local</code>.</p>\n<p>El despliegue toma 5 minutos, en casa tengo todas las computadoras linux accesibles desde todas las otras.</p>\n",
      "date_published": "2021-02-16T22:24:10Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/hello-world.html",
      "url": "https://jisbruzzi.github.io/garden/hello-world.html",
      "title": "Un cuaderno con ideas",
      "content_html": "<p>Desde que renuncié estoy aprendiendo muchas cosas en lo profesional, tantas que estoy necesitando tener algún lugar donde escribirlas para:</p>\n<ul>\n<li>Acordarme que las aprendí</li>\n<li>Poder referir a las personas acá cuando tengo que pasarles cierta información</li>\n<li>Agrupar links</li>\n</ul>\n<p>Hace algún tiempo junto cosas escritas en cuadernos y archivos markdown que dan vueltas por diversos repositorios. Lo que no tengo es <em>Autoridad</em> para decir cosas. Lo que voy a subir acá va a ser más bien una síntesis de mis aprendizajes.</p>\n<p>Planeo cubrir:</p>\n<ul>\n<li>Temas 100% técnicos y prácticos (&quot;guías&quot; o &quot;tutoriales&quot;)\n<ul>\n<li>Desarrollo web</li>\n<li>Ricing y linux</li>\n</ul>\n</li>\n<li>Resúmenes de cosas que leo o aprendo</li>\n<li>Vivencias profesionales</li>\n<li>Cosas que necesito subir a algún lugar y no sé dónde</li>\n</ul>\n<p>Este sitio va a ser una combinación de blog y wiki. Los posts:</p>\n<ul>\n<li>Le tienen que servir en mayor medida al lector que a mí</li>\n<li>Van a ser cortos</li>\n</ul>\n<p>Planeo orientar este blog a tags, de esta manera cada tag tendría su propio propósito. Además tengo previsto hacer algunos posts en inglés y/o traducir algunos. Voy a poner un <em>modo limpio</em>.</p>\n<p>Tareas pendientes:</p>\n<ul>\n<li>[ ] Traer 2 ó 3 posts.</li>\n<li>[ ] Mejorar estilos (css), eliminar tailwind</li>\n<li>[ ] Renombrar el blog a <code>blog</code> en vez de <code>next-blog</code></li>\n<li>[ ] Sistema híbrido que evita la necesidad de abrir el post si es corto/no tiene excerpt</li>\n<li>[ ] Página de tag</li>\n<li>[ ] Modo &quot;limpio&quot; que remueve links de navegación y simplifica la interfaz (para clientes, etc)</li>\n<li>[ ] Múltiples idiomas</li>\n<li>[ ] Página personal/cv</li>\n</ul>\n",
      "date_published": "2021-02-16T21:14:49Z"
    },{
      "id": "https://jisbruzzi.github.io/garden/comunicacion.html",
      "url": "https://jisbruzzi.github.io/garden/comunicacion.html",
      "title": "Cómo comunicarse",
      "content_html": "<p>Viví situaciones comunicativas muy distintas a lo largo de mi vida:</p>\n<ul>\n<li>En mi adolescencia nos mudamos a Brasil, tuve que aprender portugués muy rápido para poder rendir bien.</li>\n<li>Durante varios años fui a misionar con <a href=\"https://mvg.com.ar/\">jornadas</a> a Lavalle, Corrientes. En esta situación es necesario transmitir conceptos importantes en un lenguaje muy distinto, y en muy poco tiempo.</li>\n<li>Trabajé escasísimos 2 años y medio en empresas de software.</li>\n</ul>\n<p>Esto es lo que aprendí. Nótese que en este post no cito bibliografía.</p>\n<h1 id=\"1.-las-palabras-se-pagan\" tabindex=\"-1\">1. Las palabras se pagan <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/comunicacion.html#1.-las-palabras-se-pagan\" aria-hidden=\"true\">#</a></h1>\n<p>Las palabras son caras en muchos sentidos. Las paga el que las escribe y el que las lee; el que las escucha y el que las dice. Hay que elegirlas bien para minimizar su cantidad y maximizar la efectividad del mensaje. Es conveniente repensar un mensaje de chat o mail para asegurarnos de que el texto escrito realmente transmite información.</p>\n<h1 id=\"2.-analfabetismo-funcional\" tabindex=\"-1\">2. <a href=\"https://es.wikipedia.org/wiki/Analfabetismo_funcional\">Analfabetismo funcional</a> <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/comunicacion.html#2.-analfabetismo-funcional\" aria-hidden=\"true\">#</a></h1>\n<p>No es lo mismo saber leer una señal en la calle que saber leer un artículo de un diario. No es lo mismo escribir tu nombre que escribir un cuento corto, o un texto argumentativo. Poner palabras una al lado de la otra no es lo mismo que escribir un texto. En diversas situaciones, tenemos que comunicarnos con personas que manejan peor el lenguaje. Para que la comunicación sea efectiva, es necesario adaptarse al receptor.</p>\n<p>Algunas estrategias:</p>\n<ul>\n<li>Usar Ejemplos</li>\n<li>Usar Analogías o metáforas</li>\n<li>Simplificar el lenguaje</li>\n<li>Reducir el uso de la palabra escrita. Pueden usarse diagramas, videos, juegos, experimentos, etc.</li>\n<li>Escribir un mensaje más corto o hablar menos</li>\n<li>Reducir la cantidad de temas o conceptos explicados en un mismo texto o conversación. Dejar algún tema para más tarde o para otro día.</li>\n</ul>\n<h1 id=\"3.-empatia\" tabindex=\"-1\">3. Empatía <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/comunicacion.html#3.-empatia\" aria-hidden=\"true\">#</a></h1>\n<p>Independientemente de la habilidad con que se maneje de la palabra escrita, es casi imposible comunicarse con alguien que no empatiza. El emisor debe intentar meterse en la cabeza del receptor para entender cómo va a ser interpretado el mensaje. Para esto es bueno pensar en quién es el receptor y para qué va a usar esta información el receptor. Las palabras que se emiten, se emiten <em>para</em> el receptor: tienen que ser como una artesanía o un mueble hecho a medida.</p>\n<h1 id=\"4.-sinonimos\" tabindex=\"-1\">4. Sinónimos <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/comunicacion.html#4.-sinonimos\" aria-hidden=\"true\">#</a></h1>\n<p>Los sinónimos debilitan el mensaje y hay que evitarlos. Es mejor decidirse por la palabra más precisa en vez de enumerar varias similares. Sobre todo en textos técnicos, donde cada palbra tiene un significado muy preciso, los sinónimos necesariamente confunden. En otros textos, se usan para evitar sonidos repetitivos y estéticamente desagradables. Es importante que el texto sea efectivo, no que sea estético.</p>\n<h1 id=\"5.-diagramas\" tabindex=\"-1\">5. Diagramas <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/comunicacion.html#5.-diagramas\" aria-hidden=\"true\">#</a></h1>\n<p>Los diagramas transmiten ideas que el texto no puede. Los diagramas son muy superiores a la prosa para explicar absolutamente cualquier cosa. Intentá escribir la menor cantidad de texto posible y usar la mayor cantidad posible de diagramas. Mi herramienta favorita es <code>draw.io</code> (ahora llamada <a href=\"https://diagrams.net/\">diagrams.net</a>).</p>\n<h1 id=\"6.-logica-y-evidencias\" tabindex=\"-1\">6. Lógica y evidencias <a class=\"direct-link\" href=\"https://jisbruzzi.github.io/garden/comunicacion.html#6.-logica-y-evidencias\" aria-hidden=\"true\">#</a></h1>\n<p>La información verdadera emana de fuentes confiables o de un razonamiento válido, basado en información verdadera. Cuando algo que digas o escribas no cumpla estas condiciones, tenés que avisar. De esta manera, todo lo que decís es verdadero. Si, para cumplir esto, abusás de frases como &quot;creo que&quot;, &quot;me parece&quot;, &quot;no estoy seguro&quot;, etc; lo más conveniente es guardar silencio.</p>\n",
      "date_published": "2021-02-16T21:14:49Z"
    }
  ]
}
